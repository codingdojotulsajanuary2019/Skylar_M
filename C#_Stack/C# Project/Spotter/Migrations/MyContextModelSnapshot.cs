// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spotter.Models;

namespace Spotter.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Spotter.Models.Buddy", b =>
                {
                    b.Property<int>("BuddyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RequestedId");

                    b.Property<int>("RequesterId");

                    b.Property<int?>("UserId");

                    b.HasKey("BuddyId");

                    b.HasIndex("RequestedId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("UserId");

                    b.ToTable("Buddies");
                });

            modelBuilder.Entity("Spotter.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("ReceiverId");

                    b.Property<int>("SenderId");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Spotter.Models.PersonalDetails", b =>
                {
                    b.Property<int>("PersonalDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gym")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("PersonalDetailsId");

                    b.ToTable("PersonalDetails");
                });

            modelBuilder.Entity("Spotter.Models.PhysicalTraits", b =>
                {
                    b.Property<int>("PhysicalTraitsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int>("BenchMax");

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("Height")
                        .IsRequired();

                    b.Property<int>("SquatMax");

                    b.Property<int>("UserId");

                    b.Property<string>("Weight")
                        .IsRequired();

                    b.Property<string>("WorkoutSchedule")
                        .IsRequired();

                    b.Property<string>("WorkoutStyle")
                        .IsRequired();

                    b.HasKey("PhysicalTraitsId");

                    b.ToTable("PhysicalTraits");
                });

            modelBuilder.Entity("Spotter.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Spotter.Models.Buddy", b =>
                {
                    b.HasOne("Spotter.Models.User", "Requested")
                        .WithMany("Requesters")
                        .HasForeignKey("RequestedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spotter.Models.User", "Requester")
                        .WithMany("Requested")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spotter.Models.User")
                        .WithMany("Buddies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Spotter.Models.Message", b =>
                {
                    b.HasOne("Spotter.Models.User", "Receiver")
                        .WithMany("Sent")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spotter.Models.User", "Sender")
                        .WithMany("Received")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
